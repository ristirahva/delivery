/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.task.deliveryapp.api.adapters.http;

import ru.task.deliveryapp.api.adapters.http.contract.model.CourierModel;
import ru.task.deliveryapp.api.adapters.http.contract.model.ErrorModel;
import ru.task.deliveryapp.api.adapters.http.contract.model.OrderModel;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Optional;
import jakarta.annotation.Generated;
import ru.task.deliveryapp.core.application.usecases.commands.CreateOrderCommand;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-06T16:45:15.400693400+03:00[Europe/Moscow]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "api", description = "the api API")
public interface DeliveryApi {

    public static String CREATE_ORDER = "/api/v1/orders";
    public static String GET_ALL_COURIERS = "/api/v1/couriers/";
    public static String GET_ACTIVE_ORDERS = "/api/v1/orders/active";
    public static String START_WORK = "/api/v1/couriers/{id}/start-work";
    public static String STOP_WORK = "/api/v1/couriers/{id}/stop-work";

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v1/couriers : Добавить курьера
     * Позволяет создать курьера и затем вывести на работу
     *
     * @return Успешный ответ (status code 201)
     *         or Ошибка (status code 200)
     */
    @Operation(
        operationId = "createCourier",
        summary = "Добавить курьера",
        description = "Позволяет создать курьера и затем вывести на работу",
        responses = {
            @ApiResponse(responseCode = "201", description = "Успешный ответ"),
            @ApiResponse(responseCode = "default", description = "Ошибка", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/couriers",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> createCourier(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/orders : Создать заказ
     * Позволяет создать заказ с целью тестирования
     *
     * @return Успешный ответ (status code 201)
     *         or Ошибка (status code 200)
     */
    @Operation(
        operationId = "createOrder",
        summary = "Создать заказ",
        description = "Позволяет создать заказ с целью тестирования",
        responses = {
            @ApiResponse(responseCode = "201", description = "Успешный ответ"),
            @ApiResponse(responseCode = "default", description = "Ошибка", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = CREATE_ORDER,
        produces = { "application/json" }
    )

    default ResponseEntity<Void> createOrder(@RequestBody CreateOrderCommand command) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/orders/active : Получить все актуальные заказы
     * Позволяет получить все актуальные заказы
     *
     * @return Успешный ответ (status code 200)
     *         or Ошибка (status code 200)
     */
    @Operation(
        operationId = "getActiveOrders",
        summary = "Получить все актуальные заказы",
        description = "Позволяет получить все актуальные заказы",
        responses = {
            @ApiResponse(responseCode = "200", description = "Успешный ответ", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OrderModel.class)))
            }),
            @ApiResponse(responseCode = "default", description = "Ошибка", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = GET_ACTIVE_ORDERS,
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<OrderModel>> getActiveOrders(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"location\" : { \"x\" : 0, \"y\" : 6 }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"location\" : { \"x\" : 0, \"y\" : 6 }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/couriers/ : Получить всех курьеров
     * Позволяет получить всех курьеров
     *
     * @return Успешный ответ (status code 200)
     *         or Ошибка (status code 200)
     */
    @Operation(
        operationId = "getAllCouriers",
        summary = "Получить всех курьеров",
        description = "Позволяет получить всех курьеров",
        responses = {
            @ApiResponse(responseCode = "200", description = "Успешный ответ", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CourierModel.class)))
            }),
            @ApiResponse(responseCode = "default", description = "Ошибка", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = GET_ALL_COURIERS,
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<CourierModel>> getAllCouriers(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"location\" : { \"x\" : 0, \"y\" : 6 }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : \"not-available\" }, { \"location\" : { \"x\" : 0, \"y\" : 6 }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : \"not-available\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/couriers/{id}/start-work : Начать работать
     * Позволяет курьеру начать работать
     *
     * @param courierId Идентификатор курьера (required)
     * @return Успешный ответ (status code 200)
     *         or Ошибка (status code 200)
     */
    @Operation(
        operationId = "startWork",
        summary = "Начать работать",
        description = "Позволяет курьеру начать работать",
        responses = {
            @ApiResponse(responseCode = "200", description = "Успешный ответ"),
            @ApiResponse(responseCode = "default", description = "Ошибка", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = START_WORK,
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> startWork(
        @Parameter(name = "id", description = "Идентификатор курьера", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID courierId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/couriers/{id}/stop-work : Закончить работать
     * Позволяет курьеру закончить работать
     *
     * @param courierId Идентификатор курьера (required)
     * @return Успешный ответ (status code 200)
     *         or Ошибка (status code 200)
     */
    @Operation(
        operationId = "stopWork",
        summary = "Закончить работать",
        description = "Позволяет курьеру закончить работать",
        responses = {
            @ApiResponse(responseCode = "200", description = "Успешный ответ"),
            @ApiResponse(responseCode = "default", description = "Ошибка", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = STOP_WORK,
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> stopWork(
        @Parameter(name = "id", description = "Идентификатор курьера", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID courierId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
